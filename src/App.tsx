import React, { useState } from 'react';
import { Toast, useToast } from './components/Toast';
import { FormField, useValidation } from './components/FormValidation';
import { PaymentIntegration } from './components/PaymentIntegration';
import { ChevronDown } from 'lucide-react';

interface Service {
  id: string;
  name: string;
  description: string;
  price: number;
  selected: boolean;
  category: 'essential' | 'additional' | 'premium';
}

interface ContactFormData {
  name: string;
  email: string;
  phone: string;
  promoCode: string;
}

interface DiscountRule {
  type: 'bulk' | 'promo' | 'first_time' | 'seasonal';
  value: number;
  description: string;
  condition?: (services: Service[], formData?: ContactFormData) => boolean;
}

const App = () => {
  const { toasts, addToast, removeToast } = useToast();
  const { validateForm } = useValidation();

  const [services, setServices] = useState<Service[]>([
    {
      id: '1',
      name: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏',
      description: '"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞–º —Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º –≤–æ–ª–Ω—É—é—â–∏–º –≤–∞—Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –∏–ª–∏ –±—ã—Ç–æ–≤—ã–º —Ç–µ–º–∞–º. –ù–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ü–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–µ–∑–¥–∞ –¥–ª—è –∫–µ–π—Å–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ + —à–∞–±–ª–æ–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ —Å–µ–±–µ –¥–ª—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–π ‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é —Ä–µ–±–µ–Ω–∫–∞ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é —à–∫–æ–ª—É (—Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è, –∞–ª–≥–æ—Ä–∏—Ç–º –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–±–Ω–∏–∫–æ–≤ –∏ –ø—Ä.)"',
      price: 150,
      selected: false,
      category: 'essential'
    },
    {
      id: '2',
      name: 'NIF (–ù–∞–ª–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä)',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–≥–æ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (NIF) - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤, –≤–µ–¥—É—â–∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏. –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–∞—á—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ NIF. –°—Ä–æ–∫ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π',
      price: 120,
      selected: false,
      category: 'essential'
    },
    {
      id: '3',
      name: '–ó–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –Ω–∞ –ø–æ–¥–∞—á—É',
      description: '"–ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–∞—á—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ª—é–±—É—é –≤–∏–∑–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É ‚Äì –≤–∞–∂–Ω–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω—ã –≤–∞—à–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –∏–ª–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–∏. –°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –ª–æ–∫–∞—Ü–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 4 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤.\n –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ –Ω–∞ –ø–æ–¥–∞—á—É, –≤–∞–∂–Ω–æ –ª–∏—à—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–ª–æ—Ç 24/7. –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞, –µ—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –≤–∏–∑–æ–≤–æ–º—É –ø–æ—Ä—Ç–∞–ª—É –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏.\n –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞:\nüìç –ú–æ—Å–∫–≤–∞ | –ê–Ω–∫–∞—Ä–∞ | –ú–∞–¥—Ä–∏–¥ | –ü–∞—Ä–∏–∂ | –ë–∞–Ω–≥–∫–æ–∫ | –ë—É—Ö–∞—Ä–µ—Å—Ç –∏ –¥—Ä—É–≥–∏–µ',
      price: 100,
      selected: false,
      category: 'essential'
    },
     {
      id: '4',
      name: 'Check-Up –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      description: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É: —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö –∏ –∞–ø–æ—Å—Ç–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç, —Å–ø—Ä–∞–≤–æ–∫, –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã, –≤—ã–ø–∏—Å–æ–∫ –∏ –¥—Ä.\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ\n\n–î–ª—è –∫–∞–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ–¥–æ–π–¥—ë—Ç:\n- D7 ‚Äî –≤–∏–∑–∞ –ø–æ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É\n- Digital Nomad Visa\n- D2 ‚Äî –≤–∏–∑–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—Ç–∞–ø –∏–ª–∏ –ò–ü)\n- D3 ‚Äî –≤–∏–∑–∞ –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n- –í–ù–ñ –ø–æ —É—á—ë–±–µ (—à–∫–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤)\n- –í–æ—Å—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ–º—å–∏",
      price: 250,
      selected: false,
      category: 'essential'
    },
     {
      id: '5',
      name: '–û—Ç–∫—Ä—ã—Ç—å –ò–ü –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏',
      description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ –∏–ª–∏ –ò–ü —Å –≤—ã–±–æ—Ä–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–∂–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∞–ª—å–Ω–æ –≤–µ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å –∏–ª–∏ –±—ã—Ç—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–º –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–∏–∑—É D2 –∏–ª–∏ –í–ù–ñ –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.',
      price: 160,
      selected: false,
      category: 'additional'
    },
    {
      id: '6',
      name: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –±–∞–Ω–∫',
      description: '–û–±—à–∏—Ä–Ω–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∫–µ–π—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–Ω–∫ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏. –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –º–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∞—á–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –æ—Ç –∫–æ–º–ø–ª–∞–π–µ–Ω—Å–∞ –±–∞–Ω–∫–∞.',
      price: 450,
      selected: false,
      category: 'premium'
    },
    {
      id: '7',
      name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –±–∞–Ω–∫–µ Caixa Geral',
      description: '–°—á–µ—Ç –≤ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º –±–∞–Ω–∫–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–∞—á–∏ –Ω–∞ –í–ù–ñ, –∞ —Ç–∞–∫–∂–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ –±—ã—Ç–æ–≤–æ–π –∂–∏–∑–Ω–∏ –≤ —Å—Ç—Ä–∞–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø–ª–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ò–ü. –ù–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å, –≤ –∫–∞–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äì —á—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –†–§ –∏ –†–ë, –Ω–æ —Ç–∞–∫–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.',
      price: 150,
      selected: false,
      category: 'premium'
    }
  ]);

  const [formData, setFormData] = useState<ContactFormData>({
    name: '',
    email: '',
    phone: '',
    promoCode: ''
  });

  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [showContactForm, setShowContactForm] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentStep, setCurrentStep] = useState<'selection' | 'contact' | 'payment'>('selection');

  const discountRules: DiscountRule[] = [
    {
      type: 'bulk',
      value: 0.15,
      description: '–°–∫–∏–¥–∫–∞ 15% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –≤—Å–µ—Ö —É—Å–ª—É–≥',
      condition: (services) => services.every(s => s.selected)
    },
    {
      type: 'promo',
      value: 0.10,
      description: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 10% —Å–∫–∏–¥–∫—É',
      condition: (services, formData) => formData?.promoCode.toUpperCase() === 'DIGITAL2024'
    },
    {
      type: 'first_time',
      value: 0.05,
      description: '–°–∫–∏–¥–∫–∞ 5% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      condition: (services) => services.filter(s => s.selected).length >= 2
    }
  ];

  const toggleService = (id: string) => {
    setServices(prev => prev.map(service => 
      service.id === id ? { ...service, selected: !service.selected } : service
    ));
    
    if (navigator.vibrate) {
      navigator.vibrate(50);
    }
  };

  const calculateTotal = () => {
    const selectedServices = services.filter(s => s.selected);
    const subtotal = selectedServices.reduce((sum, service) => sum + service.price, 0);
    
    let totalDiscount = 0;
    const appliedDiscounts: string[] = [];

    discountRules.forEach(rule => {
      if (rule.condition && rule.condition(services, formData)) {
        totalDiscount = Math.max(totalDiscount, rule.value);
        appliedDiscounts.push(rule.description);
      }
    });

    const discountAmount = subtotal * totalDiscount;
    const total = subtotal - discountAmount;

    return {
      subtotal,
      discount: totalDiscount,
      discountAmount,
      total,
      appliedDiscounts,
      selectedServices
    };
  };

  const validateContactForm = () => {
    const validationRules = {
      name: { required: true, minLength: 2 },
      email: { required: true, email: true },
      phone: { required: true, phone: true }
    };

    const formDataAsRecord: Record<string, string> = {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      promoCode: formData.promoCode
    };

    const errors = validateForm(formDataAsRecord, validationRules);
    const errorMap: Record<string, string> = {};
    
    errors.forEach(error => {
      errorMap[error.field] = error.message;
    });

    setFormErrors(errorMap);
    return errors.length === 0;
  };

  const handleNextStep = () => {
    const calculation = calculateTotal();
    
    if (calculation.selectedServices.length === 0) {
      addToast('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É', 'warning');
      return;
    }

    if (currentStep === 'selection') {
      setCurrentStep('contact');
      setShowContactForm(true);
    } else if (currentStep === 'contact') {
      if (validateContactForm()) {
        setCurrentStep('payment');
        addToast('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
      } else {
        addToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', 'error');
      }
    }
  };

  const handlePayment = async (method: string, amount: number) => {
    setIsProcessing(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      addToast(`–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ ${method}!`, 'success');
      
      setServices(prev => prev.map(s => ({ ...s, selected: false })));
      setFormData({ name: '', email: '', phone: '', promoCode: '' });
      setCurrentStep('selection');
      setShowContactForm(false);
      setTermsAccepted(false);
      
    } catch (error) {
      addToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞', 'error');
    } finally {
      setIsProcessing(false);
    }
  };

  const calculation = calculateTotal();

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-purple-50/30 p-4">
      <div className="max-w-md mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-thin text-gray-800 mb-2">
            Digital Nomad
          </h1>
          <div className="w-24 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 mx-auto mb-4"></div>
          <p className="text-sm font-light text-gray-600">
            –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ—á–µ–≤–Ω–∏–∫–∞ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏
          </p>
          
          <div className="flex justify-center mt-6 space-x-2">
            {['selection', 'contact', 'payment'].map((step, index) => (
              <div
                key={step}
                className={`w-3 h-3 rounded-full transition-all duration-300 ${
                  currentStep === step 
                    ? 'bg-blue-500 scale-125' 
                    : index < ['selection', 'contact', 'payment'].indexOf(currentStep)
                    ? 'bg-green-500'
                    : 'bg-gray-200'
                }`}
              />
            ))}
          </div>
        </div>

        {currentStep === 'selection' && (
          <div className="space-y-3 mb-8">
            {services.map((service) => (
              <ServiceCard 
                key={service.id}
                service={service}
                onToggle={toggleService}
              />
            ))}
          </div>
        )}

        {currentStep === 'contact' && (
          <div className="space-y-4 mb-8">
            <h2 className="text-xl font-light text-gray-800 mb-4">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            
            <FormField
              label="–ü–æ–ª–Ω–æ–µ –∏–º—è"
              value={formData.name}
              onChange={(value) => setFormData(prev => ({ ...prev, name: value }))}
              error={formErrors.name}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
            />
            
            <FormField
              label="Email"
              type="email"
              value={formData.email}
              onChange={(value) => setFormData(prev => ({ ...prev, email: value }))}
              error={formErrors.email}
              required
              placeholder="example@email.com"
            />
            
            <FormField
              label="–¢–µ–ª–µ—Ñ–æ–Ω"
              type="tel"
              value={formData.phone}
              onChange={(value) => setFormData(prev => ({ ...prev, phone: value }))}
              error={formErrors.phone}
              required
              placeholder="+7 (999) 123-45-67"
            />
            
            <FormField
              label="–ü—Ä–æ–º–æ–∫–æ–¥"
              value={formData.promoCode}
              onChange={(value) => setFormData(prev => ({ ...prev, promoCode: value }))}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            />
          </div>
        )}

        {currentStep === 'payment' && (
          <div className="mb-8">
            <h2 className="text-xl font-light text-gray-800 mb-4">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>
            <PaymentIntegration
              totalAmount={calculation.total}
              orderData={{
                services: calculation.selectedServices.map(s => ({ name: s.name, price: s.price })),
                discounts: calculation.appliedDiscounts.map(desc => ({ name: desc, amount: calculation.discountAmount })),
                contactInfo: {
                  firstName: formData.name,
                  lastName: '',
                  email: formData.email,
                  phone: formData.phone
                }
              }}
            />
          </div>
        )}

        {calculation.selectedServices.length > 0 && (
          <PriceSummary calculation={calculation} />
        )}

        <div className="space-y-4">
          {currentStep !== 'payment' && (
            <button
              onClick={handleNextStep}
              disabled={calculation.selectedServices.length === 0}
              className="w-full py-4 bg-gradient-to-r from-blue-500 to-purple-500 text-white font-light rounded-2xl 
                shadow-2xl shadow-blue-500/30 transition-all duration-300 active:scale-95 hover:-translate-y-0.5
                disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {currentStep === 'selection' ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ö –æ–ø–ª–∞—Ç–µ'}
            </button>
          )}

          {currentStep === 'contact' && (
            <label className="flex items-start space-x-3 cursor-pointer">
              <input
                type="checkbox"
                checked={termsAccepted}
                onChange={(e) => setTermsAccepted(e.target.checked)}
                className="mt-1 w-5 h-5 rounded border-2 border-gray-300 text-blue-500 focus:ring-blue-500"
              />
              <span className="text-xs font-light text-gray-600 leading-relaxed">
                –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
              </span>
            </label>
          )}

          {currentStep !== 'selection' && (
            <button
              onClick={() => setCurrentStep(prev => 
                prev === 'payment' ? 'contact' : 'selection'
              )}
              className="w-full py-3 text-gray-600 font-light rounded-2xl border border-gray-200 
                bg-white/80 backdrop-blur-xl hover:bg-gray-50 transition-all duration-300"
            >
              –ù–∞–∑–∞–¥
            </button>
          )}
        </div>
      </div>

      <Toast toasts={toasts} removeToast={removeToast} />
    </div>
  );
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π Service Card Component —Å –ª—É—á—à–∏–º –¥—Ä–æ–ø–¥–∞—É–Ω–æ–º
const ServiceCard: React.FC<{ service: Service; onToggle: (id: string) => void }> = ({ service, onToggle }) => {
  const [isDescriptionOpen, setIsDescriptionOpen] = useState(false);

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'essential': return 'border-red-200 shadow-red-200/20';
      case 'additional': return 'border-blue-200 shadow-blue-200/20';
      case 'premium': return 'border-purple-200 shadow-purple-200/20';
      default: return 'border-gray-200 shadow-gray-200/20';
    }
  };

  const getCategoryBadge = (category: string) => {
    switch (category) {
      case 'essential': return { text: 'Basic', color: 'bg-red-100 text-red-700' };
      case 'additional': return { text: 'C—Ç–∞–Ω–¥–∞—Ä—Ç', color: 'bg-blue-100 text-blue-700' };
      case 'premium': return { text: 'Pro', color: 'bg-purple-100 text-purple-700' };
      default: return { text: '', color: '' };
    }
  };

  const badge = getCategoryBadge(service.category);

  return (
    <div className={`bg-white/80 backdrop-blur-2xl rounded-3xl p-4 shadow-2xl transition-all duration-300 hover:-translate-y-1 ${getCategoryColor(service.category)} ${service.selected ? 'ring-2 ring-blue-500/50' : ''}`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center space-x-2 mb-1">
            <h3 className="font-light text-gray-800">{service.name}</h3>
            {badge.text && (
              <span className={`px-2 py-1 rounded-full text-xs font-light ${badge.color}`}>
                {badge.text}
              </span>
            )}
          </div>
          
          <button
            onClick={() => setIsDescriptionOpen(!isDescriptionOpen)}
            className="text-blue-600 text-sm font-light bg-blue-50 px-3 py-1.5 rounded-full 
              hover:bg-blue-100 transition-all duration-200 flex items-center space-x-2"
          >
            <span>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</span>
            <ChevronDown 
              className={`w-4 h-4 transition-transform duration-300 ${
                isDescriptionOpen ? 'rotate-180' : ''
              }`} 
            />
          </button>
        </div>
        
        <div className="flex items-center space-x-3">
          <span className="font-light text-gray-800">{service.price}‚Ç¨</span>
          <label className="relative">
            <input
              type="checkbox"
              checked={service.selected}
              onChange={() => onToggle(service.id)}
              className="sr-only"
            />
            <div className={`w-6 h-6 rounded-full border-2 transition-all duration-300 cursor-pointer ${
              service.selected 
                ? 'bg-blue-500 border-blue-500 shadow-lg shadow-blue-500/50 scale-110' 
                : 'border-gray-300 hover:border-blue-300'
            }`}>
              {service.selected && (
                <div className="w-full h-full flex items-center justify-center">
                  <span className="text-white text-xs">‚úì</span>
                </div>
              )}
            </div>
          </label>
        </div>
      </div>
      
      <div className={`overflow-hidden transition-all duration-500 ease-out ${
        isDescriptionOpen ? 'max-h-96 opacity-100 mt-3 pt-3' : 'max-h-0 opacity-0'
      }`}>
        <div className="border-t border-gray-100 pt-3">
          <p className="text-sm font-light text-gray-600 leading-relaxed">
            {service.description}
          </p>
        </div>
      </div>
    </div>
  );
};

// Price Summary Component
const PriceSummary: React.FC<{ calculation: any }> = ({ calculation }) => {
  return (
    <div className="bg-white/80 backdrop-blur-2xl rounded-3xl p-6 shadow-2xl shadow-blue-500/20 mb-8">
      <h3 className="font-light text-gray-800 mb-4">–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</h3>
      
      <div className="space-y-2 mb-4">
        {calculation.selectedServices.map((service: Service) => (
          <div key={service.id} className="flex justify-between text-sm">
            <span className="font-light text-gray-600">{service.name}</span>
            <span className="text-gray-800">{service.price}‚Ç¨</span>
          </div>
        ))}
      </div>
      
      <div className="border-t border-gray-200 pt-4 space-y-2">
        <div className="flex justify-between">
          <span className="font-light text-gray-600">–ü–æ–¥—ã—Ç–æ–≥:</span>
          <span className="text-gray-800">{calculation.subtotal}‚Ç¨</span>
        </div>
        
        {calculation.discount > 0 && (
          <>
            <div className="flex justify-between text-green-600">
              <span className="font-light">–°–∫–∏–¥–∫–∞ ({Math.round(calculation.discount * 100)}%):</span>
              <span>-{calculation.discountAmount.toFixed(0)}‚Ç¨</span>
            </div>
            {calculation.appliedDiscounts.map((discount: string, index: number) => (
              <div key={index} className="text-xs text-green-600 font-light">
                ‚Ä¢ {discount}
              </div>
            ))}
          </>
        )}
        
        <div className="flex justify-between text-lg font-medium pt-2 border-t border-gray-200">
          <span>–ò—Ç–æ–≥–æ:</span>
          <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            {calculation.total}‚Ç¨
          </span>
        </div>
      </div>
    </div>
  );
};

export default App;
